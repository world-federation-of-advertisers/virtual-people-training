// Copyright 2021 The Cross-Media Measurement Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Comprehension is a feature of high-level VirtualID model config to
// support compact definition of a list of branched nodes.

syntax = "proto3";

package wfa_virtual_people;

message Comprehend {
  // ContextualBooleanExpression operates on values corresponding to keys
  // retrieved from @context, and evaluates to a boolean value.
  message ContextualBooleanExpression {
    // Equality is true if values of left_key and right_key are equal.
    message Equality {
      optional string left_key = 1;
      optional string right_key = 2;
    }
    // Boolean negation.
    message NotExpression {
      optional ContextualBooleanExpression expression = 1;
    }
    // Logical AND.
    message AndExpression {
      repeated ContextualBooleanExpression expressions = 1;
    }
    // Logical OR.
    message OrExpression {
      repeated ContextualBooleanExpression expressions = 1;
    }
    oneof expression {
      Equality equality = 1;
      NotExpression not_expression = 2;
      AndExpression and_expression = 3;
      OrExpression or_expression = 4;
    }
  }

  message Method {
    // For each value from @values a node is created and "entity=value" pair
    // is placed into @context of the message and all its descendants.
    message ForEach {
      optional string entity = 1;
      optional ListSpec values = 2;
    }

    // Assigns values to keys in @context. The values are retrieved from
    // @map_spec using @key_to_retrieve_values.
    message SetValues {
      // A list of keys to assign values.
      repeated string keys_to_assign_values = 1;

      // A key to retrieve the values to assign to @key_to_assign_values.
      // If this is not specified, then the values to assign are fixed.
      optional string key_to_retrieve_values = 2;

      // Specification of string -> list[string] map.
      optional MapSpec map_spec = 3;
    }

    // Filter returns a list containing the unchanged node if @expression
    // evaluates to true, otherwise returns an empty list.
    message Filter {
      optional ContextualBooleanExpression expression = 1;
    }

    // Applies Python-style formatting to text fields in the proto.
    // @context is used as the formatting dictionary.
    // By default, this method is always applied as the last comprehension,
    // excludes child nodes from formatting.
    message FormatTextFields {
      // All string fields in this message and sub-messages will be formatted,
      // except for fields and sub-messages listed here.
      repeated string exclude_fields = 1;
    }

    // Applies @if_method if @condition evaluates to true, otherwise applies
    // @else_method.
    message ApplyIf {
      optional ContextualBooleanExpression condition = 1;
      optional Method if_method = 2;
      optional Method else_method = 3;
    }

    // Method specification.
    oneof method {
      ForEach for_each = 1;
      SetValues set_values = 2;
      Filter filter = 3;
      FormatTextFields format_text_fields = 4;
      ApplyIf apply_if = 5;
    }
  }

  // Comprehension context. It is populated in model configuration and
  // by comprehension methods.
  message Context {
    message KeyValue {
      optional string key = 1;
      optional string value = 2;
    }
    repeated KeyValue items = 1;
  }

  // Methods of Comprehension. To be specified in the model config.
  repeated Method methods = 1;

  // Context of Comprehension. To be specified in the model config, and/or
  // filled in by comprehension methods.
  optional Context context = 2;

  // By default FormatTextFields is applied after all explicitly defined
  // methods have been applied.
  // Model config may set the value to true to override the default behavior.
  optional bool dont_apply_format_text_fields = 3;
}

// A list of strings.
message StringList {
  repeated string items = 1;
}

// Specification of a list of strings.
message ListSpec {
  // Specification of retrieving a list of strings from a CSV file.
  message ListFromCSV {
    optional string filename = 1;
    oneof column_spec {
      string column_name = 2;
      int64 column_index = 3;
    }
    optional bool make_it_sorted_set = 4;
  }

  oneof list_spec {
    StringList verbatim = 1;
    ListFromCSV from_csv = 2;
  }
}

// Specification of a string-to-strings map.
message MapSpec {
  // An explicit specification of a list of named rows.
  message StringToStringsMap {
    message KeyValue {
      optional string key = 1;
      repeated string values = 2;
    }
    repeated KeyValue items = 3;
  }

  // Specification of retrieving a list of named rows from a CSV file.
  message TableFromCSV {
    optional string filename = 1;
    optional string key_column_name = 2;
    oneof columns_spec {
      StringList value_column_names = 3;
    }
  }

  oneof map_spec {
    StringToStringsMap verbatim = 3;
    TableFromCSV from_csv = 4;
  }
}
